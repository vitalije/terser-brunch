// Generated by CoffeeScript 2.3.2
var Terser, TerserOptimizer, formatError, minifyOptions;

Terser = require('terser');

formatError = function(error) {
  var err;
  err = new Error(`L${error.line}:${error.col} ${error.message}`);
  err.name = '';
  err.stack = error.stack;
  return err;
};

minifyOptions = function(opts) {
  var ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
  opts = opts != null ? opts : {};
  return {
    ecma: opts.ecma,
    warnings: opts.warnings,
    parse: (ref = opts.parse) != null ? ref : {
      bare_returns: false,
      ecma: 8,
      html5_comments: true,
      shebang: true
    },
    compress: (ref1 = opts.compress) != null ? ref1 : {
      arrows: true,
      arguments: false,
      booleans: true,
      collapse_vars: true,
      comparisons: true,
      computed_props: true,
      conditionals: true,
      dead_code: true,
      defaults: true,
      directives: true,
      drop_console: false,
      drop_debugger: true,
      ecma: 5,
      evaluate: true,
      expression: false,
      global_defs: {},
      hoist_funs: false,
      hoist_props: true,
      hoist_vars: false,
      if_return: true,
      inline: true,
      join_vars: true,
      keep_classnames: false,
      keep_fargs: true,
      keep_fnames: false,
      keep_infinity: false,
      loops: true,
      module: false,
      negate_iife: true,
      passes: 1,
      properties: true,
      pure_funcs: null,
      pure_getters: 'strict',
      reduce_funcs: true,
      reduce_vars: true,
      sequences: true,
      side_effects: true,
      switches: true,
      toplevel: false,
      top_retain: null,
      typeofs: true,
      unsafe: false,
      unsafe_arrows: false,
      unsafe_comps: false,
      unsafe_Function: false,
      unsafe_math: false,
      unsafe_methods: false,
      unsafe_proto: false,
      unsafe_regexp: false,
      unsafe_undefined: false,
      unused: true,
      warnings: false
    },
    mangle: (ref2 = opts.mangle) != null ? ref2 : true,
    module: (ref3 = opts.module) != null ? ref3 : false,
    output: (ref4 = opts.output) != null ? ref4 : {},
    sourceMap: (ref5 = opts.sourceMap) != null ? ref5 : false,
    toplevel: (ref6 = opts.toplevel) != null ? ref6 : false,
    nameCache: (ref7 = opts.nameCache) != null ? ref7 : null,
    ie8: (ref8 = opts.ie8) != null ? ref8 : false,
    keep_fnames: (ref9 = opts.keep_fnames) != null ? ref9 : false,
    safari10: (ref10 = opts.safari10) != null ? ref10 : false
  };
};

TerserOptimizer = function(config) {
  this.options = Object.assign({}, config.plugins.terser);
  this.options.sourceMaps = !!this.options.sourceMaps;
  this.optimize = (file) => {
    var data, er, optimized, opts, path, ref, ref1, result;
    data = file.data;
    path = file.path;
    try {
      if ((ref = this.options.ignored) != null ? ref.test(path) : void 0) {
        result = {
          data,
          map: (ref1 = file.map) != null ? ref1.toString() : void 0
        };
        return Promise.resolve(result);
      }
    } catch (error1) {
      er = error1;
      return Promise.reject(`error checking ignored files to minimize ${er}`);
    }
    if (this.options.sourceMaps != null) {
      if (file.map != null) {
        this.options.sourceMap = {
          content: file.map.toJSON(),
          url: `${path}.map`
        };
      } else {
        this.options.sourceMap = {
          filename: path,
          url: `${path}.map`
        };
      }
    }
    try {
      opts = minifyOptions(this.options);
      optimized = Terser.minify(data, opts);
      if (optimized.error != null) {
        return Promise.reject(formatError(optimized.error));
      }
      result = {
        data: optimized.code
      };
      if (this.options.sourceMaps != null) {
        result.map = optimized.map;
        result.data = result.data.replace(/\n\/\/#sourceMappingURL=\S+$/, '');
      }
      return Promise.resolve(result);
    } catch (error1) {
      er = error1;
      return Promise.reject(formatError(er));
    }
  };
};

TerserOptimizer.prototype.brunchPlugin = true;

TerserOptimizer.prototype.type = 'javascript';

module.exports = TerserOptimizer;
