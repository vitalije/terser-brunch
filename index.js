// Generated by CoffeeScript 2.3.2
var Terser, TerserOptimizer, formatError;

Terser = require('terser');

formatError = function(error) {
  var err;
  err = new Error(`L${error.line}:${error.col} ${error.message}`);
  err.name = '';
  err.stack = error.stack;
  return err;
};

TerserOptimizer = function(config) {
  this.options = Object.assign({}, config.plugins.terser);
  this.options.fromString = true;
  this.options.sourceMaps = !!config.sourceMaps;
  return this.optimize = (file) => {
    var data, er, optimized, path, ref, ref1, result;
    data = file.data;
    path = file.path;
    try {
      if ((ref = this.options.ignored) != null ? ref.test(path) : void 0) {
        result = {
          data,
          map: (ref1 = file.map) != null ? ref1.toString() : void 0
        };
        return Promise.resolve(result);
      }
    } catch (error1) {
      er = error1;
      return Promise.reject(`error checking ignored files to minimize ${er}`);
    }
    if (file.map != null) {
      this.options.inSourceMap = file.map.toJSON();
    }
    this.options.outSourceMap = this.options.sourceMaps != null ? `${path}.map` : void 0;
    try {
      optimized = Terser.minify(data, this.options);
      result = {
        data: optimized.code
      };
      if (this.options.sourceMaps != null) {
        result.map = optimized.map;
        result.data = result.data.replace(/\n\/\/#sourceMappingURL=\S+$/, '');
      }
      return Promise.resolve(result);
    } catch (error1) {
      er = error1;
      return Promise.reject(formatError(er));
    }
  };
};

TerserOptimizer.prototype.brunchPlugin = true;

TerserOptimizer.prototype.type = 'javascript';

module.exports = TerserOptimizer;
